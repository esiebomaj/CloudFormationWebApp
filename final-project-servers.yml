Parameters:
  EnvironmentName:
    Type: String
    Description: the name of the environment

Resources:
  UdacityS3ReadOnlyEC2:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - s3.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:Get*
                Resource: "*"

  ProfileWithRolesForOurApp:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref UdacityS3ReadOnlyEC2

  WebSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Secuity group for the web servers
      GroupName: !Sub ${EnvironmentName}-WebSecGroup
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all inbound traffic on port 80
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
        - CidrIp: 0.0.0.0/0
          Description: Allow all inbound traffic on port 22
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp
      SecurityGroupEgress:
        CidrIp: 0.0.0.0/0
        Description: Allow all outbound traffic on all ports
        FromPort: 0
        ToPort: 65535
        IpProtocol: tcp
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-WebSecGroup
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"

  AppLBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: security group for the app load balancer
      GroupName: !Sub ${EnvironmentName}-LBSecGroup
      SecurityGroupEgress:
        CidrIp: 0.0.0.0/0
        Description: Allow all outbound traffic
        FromPort: 0
        ToPort: 65535
        IpProtocol: tcp
      SecurityGroupIngress:
        CidrIp: 0.0.0.0/0
        Description: Allow all inbound traffic
        FromPort: 80
        ToPort: 80
        IpProtocol: tcp
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-LBSecGroup
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"

  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          echo "it works! Udagram, Udacity" > index.html
      ImageId: ami-005de95e8ff495156
      SecurityGroups:
        - Ref: WebSecGroup
      InstanceType: t2.medium
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: "10"

  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: "1"
      MaxSize: "6"
      TargetGroupARNs:
        - Ref: WebAppTargetGroup
      HealthCheckGracePeriod: 60
      HealthCheckType: ELB

  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
        - Ref: AppLBSecGroup

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: "80"
      Protocol: HTTP

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref "WebAppTargetGroup"
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref "Listener"
      Priority: 1

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"

Outputs:
  WebAppURL:
    Description: The URL of the web application
    Value:
      Fn::Join:
        - ""
        - - "http://"
          - !GetAtt WebAppLB.DNSName
